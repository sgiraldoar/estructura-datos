import time

class Vehiculo:
    MARCAS_CARROS_PERMITIDAS = ["Chevrolet", "Toyota", "Renault", "Kia", "BMW", "Mazda", "Hyundai", "Peugeot", "Audi", "Volvo"]
    MARCAS_MOTOS_PERMITIDAS = ["Yamaha", "Suzuki", "Kawasaki", "Honda", "Ducati"]

    def __init__(self, marca, tipo, combustible):
        if tipo == "carro" and marca not in Vehiculo.MARCAS_CARROS_PERMITIDAS:
            raise ValueError(f"‚ùå La marca '{marca}' no est√° permitida para carros.")
        elif tipo == "moto" and marca not in Vehiculo.MARCAS_MOTOS_PERMITIDAS:
            raise ValueError(f"‚ùå La marca '{marca}' no est√° permitida para motos.")
        if combustible < 0 or combustible > 100:
            raise ValueError("‚ùå El nivel de combustible debe estar entre 0% y 100%.")
        self.marca = marca
        self.tipo = tipo
        self.combustible = combustible

    def encender(self):
        print("üîë Intentando encender el veh√≠culo...")
        time.sleep(1)
        if self.combustible < 10:
            print(f"‚õΩ URGENTE: El {self.tipo} {self.marca} tiene menos del 10% de combustible. ¬°Ve a la gasolinera! üö®")
        elif self.combustible < 19:
            print(f"‚ö†Ô∏è Advertencia: El {self.tipo} {self.marca} tiene bajo nivel de combustible.")
        else:
            print(f"‚úÖ El {self.tipo} {self.marca} est√° encendido y listo para salir.")

    def arrancar(self):
        print("üöÄ Preparando para arrancar...")
        time.sleep(1)
        print(f"üöó Arrancando el {self.tipo} {self.marca}. Combustible actual: {self.combustible}%.")

    def conducir(self):
        print("üõ£Ô∏è Iniciando trayecto...")
        time.sleep(1)
        while self.combustible > 0:
            print(f"‚õΩ Combustible restante: {self.combustible}%")
            self.combustible -= 1
            time.sleep(0.2)
            if self.combustible == 10:
                print(f"üö® ¬°Solo queda el 10%! Debes ir a una gasolinera pronto.")
        print(f"\n‚ùå Fin del trayecto. El {self.tipo} {self.marca} se apag√≥ por falta de combustible.")
        print("üíÄ Te has quedado varado... Llama a una gr√∫a o busca ayuda.")

class Moto(Vehiculo):
    def __init__(self, marca, combustible):
        super().__init__(marca, "moto", combustible)

class Carro(Vehiculo):
    def __init__(self, marca, combustible):
        super().__init__(marca, "carro", combustible)

def obtener_datos_vehiculo():
    marca = input("üî§ Introduce la marca del veh√≠culo: ").capitalize()
    tipo = input("üöò Introduce el tipo de veh√≠culo (carro/moto): ").lower()
    try:
        combustible = int(input("‚õΩ Introduce el nivel de combustible (%): "))
        if combustible < 0 or combustible > 100:
            raise ValueError("‚ùå El nivel de combustible debe estar entre 0% y 100%.")
    except ValueError:
        raise ValueError("‚ùå Debes ingresar un n√∫mero v√°lido de combustible entre 0 y 100.")
    
    if tipo == "carro":
        return Carro(marca, combustible)
    elif tipo == "moto":
        return Moto(marca, combustible)
    else:
        raise ValueError("‚ùå Tipo de veh√≠culo no v√°lido.")

try:
    vehiculo = obtener_datos_vehiculo()
    vehiculo.encender()
    vehiculo.arrancar()
    vehiculo.conducir()
except ValueError as e:
    print(e)
